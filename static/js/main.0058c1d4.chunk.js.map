{"version":3,"sources":["components/Carousel/Carousel.tsx","components/CarouselForm/CarouselForm.tsx","App.tsx","index.tsx"],"names":["Carousel","images","step","frameSize","itemWidth","animationDuration","transform","setTransform","infinite","useState","stopTransition","setStopTransition","minTransition","length","isStart","isEnd","goForward","prev","handleButtonClick","direction","useEffect","timerId","setTimeout","clearTimeout","listStyle","width","height","listItemStyle","imgStyle","className","type","onClick","disabled","src","alt","style","map","img","i","CarouselForm","maxFrameSize","onFrameSizeChange","onStepChange","onItemWidthChange","onAnimationDurationChange","onInfiniteChange","onSubmit","event","preventDefault","formData","FormData","currentTarget","newFrameSize","Number","get","newStep","newFItemWidth","newAnimationDuration","newInfinite","htmlFor","id","name","min","max","defaultValue","value","App","setFrameSize","setStep","setItemWidth","setAnimationDuration","setInfinite","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0058c1d4.chunk.js","sourcesContent":["import { FC, useEffect, useState } from 'react';\nimport './Carousel.scss';\n\ntype Props = {\n  images: string[];\n  step: number;\n  frameSize: number;\n  itemWidth: number;\n  animationDuration: number;\n  transform: number;\n  setTransform: (value: number | ((value: number) => number)) => void;\n  infinite: boolean;\n};\n\nexport const Carousel: FC<Props> = ({\n  images,\n  step,\n  frameSize,\n  itemWidth,\n  animationDuration,\n  transform,\n  setTransform,\n  infinite,\n}) => {\n  const [stopTransition, setStopTransition] = useState(false);\n\n  const maxTransition = 0;\n  const minTransition = -(images.length - frameSize) * itemWidth;\n\n  const isStart = transform === maxTransition;\n  const isEnd = transform === minTransition;\n\n  const goForward = () => {\n    setTransform((prev) => {\n      return prev - itemWidth * step < minTransition\n        ? minTransition\n        : prev - itemWidth * step;\n    });\n  };\n\n  const goBackward = () => {\n    setTransform((prev) => {\n      return prev + itemWidth * step > maxTransition\n        ? maxTransition\n        : prev + itemWidth * step;\n    });\n  };\n\n  const handleButtonClick = (direction: 'prev' | 'next') => {\n    if (direction === 'prev') {\n      goBackward();\n    } else {\n      goForward();\n    }\n  };\n\n  useEffect(() => {\n    const timerId = setTimeout(() => {\n      if (transform > minTransition && infinite) {\n        goForward();\n\n        return;\n      }\n\n      if (transform > minTransition && !infinite && !stopTransition) {\n        goForward();\n\n        return;\n      }\n\n      if (!infinite && !stopTransition) {\n        setStopTransition(true);\n\n        return;\n      }\n\n      if (infinite) {\n        setTransform(maxTransition);\n      }\n    }, animationDuration);\n\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [infinite, transform]);\n\n  const listStyle = {\n    width: `${frameSize * itemWidth}px`,\n    height: `${itemWidth}px`,\n  };\n\n  const listItemStyle = {\n    width: `${itemWidth}px`,\n    height: `${itemWidth}px`,\n    transform: `translateX(${transform}px)`,\n  };\n\n  const imgStyle = {\n    width: `${itemWidth}px`,\n    height: `${itemWidth}px`,\n  };\n\n  return (\n    <div className=\"Carousel\">\n      <button\n        type=\"button\"\n        className=\"button\"\n        onClick={() => handleButtonClick('prev')}\n        disabled={isStart}\n      >\n        <img\n          className=\"button__arrow\"\n          src=\"./icons/arrow-prev.png\"\n          alt=\"Prev\"\n        />\n      </button>\n\n      <ul className=\"Carousel__list\" style={listStyle}>\n        {images.map((img, i) => (\n          <li\n            key={img}\n            className=\"Carousel__list-item\"\n            style={listItemStyle}\n          >\n            <img\n              src={img}\n              alt={`${i + 1}`}\n              className=\"Carousel__img\"\n              style={imgStyle}\n            />\n          </li>\n        ))}\n      </ul>\n\n      <button\n        data-cy=\"next\"\n        type=\"button\"\n        className=\"button\"\n        onClick={() => handleButtonClick('next')}\n        disabled={isEnd}\n      >\n        <img\n          src=\"./icons/arrow-next.png\"\n          alt=\"Next\"\n          className=\"button__arrow\"\n        />\n      </button>\n    </div>\n  );\n};\n","import { FC } from 'react';\nimport './CarouselForm.scss';\n\ntype Props = {\n  frameSize: number;\n  step: number;\n  itemWidth: number;\n  animationDuration: number;\n  infinite: boolean;\n  maxFrameSize: number\n  onFrameSizeChange: (value: number) => void;\n  onStepChange: (value: number) => void;\n  onItemWidthChange: (value: number) => void;\n  onAnimationDurationChange: (value: number) => void;\n  onInfiniteChange: (value: boolean) => void\n  setTransform: (value: number | ((value: number) => number)) => void;\n};\n\nexport const CarouselForm: FC<Props> = ({\n  frameSize,\n  step,\n  itemWidth,\n  animationDuration,\n  infinite,\n  maxFrameSize,\n  onFrameSizeChange,\n  onStepChange,\n  onItemWidthChange,\n  onAnimationDurationChange,\n  onInfiniteChange,\n  setTransform,\n}) => {\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    const formData = new FormData(event.currentTarget);\n\n    const newFrameSize = Number(formData.get('frameSize'));\n    const newStep = Number(formData.get('step'));\n    const newFItemWidth = Number(formData.get('itemWidth'));\n    const newAnimationDuration = Number(formData.get('animationDuration'));\n    const newInfinite = formData.get('infinite') === 'yes';\n\n    onFrameSizeChange(newFrameSize);\n    onStepChange(newStep);\n    onItemWidthChange(newFItemWidth);\n    onAnimationDurationChange(newAnimationDuration);\n    onInfiniteChange(newInfinite);\n\n    setTransform(0);\n  };\n\n  return (\n    <form className=\"form\" onSubmit={handleFormSubmit}>\n      <div className=\"form__item\">\n        <label htmlFor=\"itemId\">\n          Item width:\n        </label>\n\n        <input\n          type=\"number\"\n          className=\"form__input\"\n          id=\"itemId\"\n          name=\"itemWidth\"\n          min=\"50\"\n          max=\"300\"\n          step=\"10\"\n          defaultValue={itemWidth}\n        />\n      </div>\n\n      <div className=\"form__item\">\n        <label htmlFor=\"frameId\">\n          Frame size:\n        </label>\n\n        <input\n          type=\"number\"\n          className=\"form__input\"\n          id=\"frameId\"\n          name=\"frameSize\"\n          min=\"1\"\n          max={maxFrameSize}\n          step=\"1\"\n          defaultValue={frameSize}\n        />\n      </div>\n\n      <div className=\"form__item\">\n        <label htmlFor=\"stepId\">\n          Step:\n        </label>\n\n        <input\n          type=\"number\"\n          className=\"form__input\"\n          id=\"stepId\"\n          name=\"step\"\n          min=\"1\"\n          max={maxFrameSize}\n          step=\"1\"\n          defaultValue={step}\n        />\n      </div>\n\n      <div className=\"form__item\">\n        <label htmlFor=\"animationDuration\">\n          Animation duration:\n        </label>\n\n        <input\n          type=\"number\"\n          className=\"form__input\"\n          id=\"animationDuration\"\n          name=\"animationDuration\"\n          min=\"1000\"\n          max=\"5000\"\n          step=\"1000\"\n          defaultValue={animationDuration}\n        />\n      </div>\n\n      <div className=\"form__item\">\n        <label htmlFor=\"infinite\">\n          Infinite:\n        </label>\n\n        <select\n          name=\"infinite\"\n          id=\"infinite\"\n          className=\"form__input\"\n          defaultValue={infinite ? 'yes' : 'no'}\n        >\n          <option value=\"yes\">\n            Yes\n          </option>\n\n          <option value=\"no\">\n            No\n          </option>\n        </select>\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"form__button\"\n      >\n        Apply\n      </button>\n    </form>\n  );\n};\n","import { FC, useState } from 'react';\nimport './App.scss';\nimport { Carousel } from './components/Carousel/Carousel';\nimport { CarouselForm } from './components/CarouselForm/CarouselForm';\n\nconst images = [\n  './img/1.png',\n  './img/2.png',\n  './img/3.png',\n  './img/4.png',\n  './img/5.png',\n  './img/6.png',\n  './img/7.png',\n  './img/8.png',\n  './img/9.png',\n  './img/10.png',\n];\n\nexport const App: FC = () => {\n  const [frameSize, setFrameSize] = useState(3);\n  const [step, setStep] = useState(3);\n  const [itemWidth, setItemWidth] = useState(130);\n  const [animationDuration, setAnimationDuration] = useState(1000);\n  const [transform, setTransform] = useState(0);\n  const [infinite, setInfinite] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <h1\n        data-cy=\"title\"\n        className=\"title\"\n      >\n        {/* eslint-disable-next-line */}\n        Carousel with {images.length} images\n      </h1>\n\n      <CarouselForm\n        frameSize={frameSize}\n        step={step}\n        itemWidth={itemWidth}\n        infinite={infinite}\n        onFrameSizeChange={setFrameSize}\n        maxFrameSize={images.length}\n        setTransform={setTransform}\n        onStepChange={setStep}\n        onItemWidthChange={setItemWidth}\n        onAnimationDurationChange={setAnimationDuration}\n        animationDuration={animationDuration}\n        onInfiniteChange={setInfinite}\n      />\n\n      <Carousel\n        images={images}\n        frameSize={frameSize}\n        step={step}\n        itemWidth={itemWidth}\n        animationDuration={animationDuration}\n        transform={transform}\n        infinite={infinite}\n        setTransform={setTransform}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}